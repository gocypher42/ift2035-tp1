(slet (((Y f)
        (lambda (n)
          (slet ((f1 (lambda (x n) (n ((lambda (n) (n (x x))) f)))))
            (n (f1 f1)))))
       ((fact fact1 n)
          (if (1 (n <=)) n (((1 (n -)) fact1) (n *)))))
  (5 (fact Y)))                       ; ↝ 120


; Y = \f -> \n -> let f1 = n x in f1 f1 n
; lambda (x n) e -> lambda (x) (lambda (n) e)
; Llet Lexical "Y" 
;             (Lfn "f" 
;                  (Lfn "n" 
;                       (Llet Lexical "f1" (lfn "x" (lfn "n" (Lpipe (Lvar "n") 
;                                                                   (Lpipe (Lvar "f1") 
;                                                                          (Lvar "f1")))))))
;                                     ) 
;             (Llet Lexical "fact"   
;                           (Lfn "fact1" 
;                                (Lfn "n" 
;                                     (Lcase (Lpipe (Lnum 1) 
;                                                   (Lpipe (Lvar "n") 
;                                                          (Lvar "<="))) 
;                                            [(Just ("true",[]),Lvar "n"),
;                                             (Just ("false",[]),Lpipe (Lpipe (Lpipe (Lnum 1) 
;                                                                                    (Lpipe (Lvar "n") 
;                                                                                           (Lvar "-"))) 
;                                                                             (Lvar "fact1")) 
;                                                                      (Lpipe (Lvar "n") 
;                                                                             (Lvar "*")))
;                                            ]))
;                           ((Lpipe (Lvar "fact") (Lvar "Y"))))
                      